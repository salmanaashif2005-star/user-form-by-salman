const express = require("express");
require("dotenv").config();
const cors = require("cors");
const bodyParser = require("body-parser");
const { Sequelize, DataTypes } = require("sequelize");

const app = express();
const PORT = process.env.PORT || 3001;

const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");

const JWT_SECRET = process.env.JWT_SECRET;

// Middleware
app.use(cors());
app.use(bodyParser.json());

// Sequelize connection
const sequelize = new Sequelize(
  process.env.DB_NAME,
  process.env.DB_USER,
  process.env.DB_PASSWORD,
  {
    host: process.env.DB_HOST,
    dialect: "mysql",
    timezone: "+05:30", // IST
  }
);

sequelize
  .authenticate()
  .then(() => console.log("Connected to MySQL with Sequelize."))
  .catch((err) => console.error("Sequelize connection error:", err));

// Define User model
const User = sequelize.define(
  "User",
  {
    name: { type: DataTypes.STRING, allowNull: false },
    email: { type: DataTypes.STRING, allowNull: false, unique: true },
    age: { type: DataTypes.INTEGER, allowNull: false },
    password: { type: DataTypes.STRING, allowNull: false },
    phone: { type: DataTypes.STRING },
    role: { type: DataTypes.STRING, defaultValue: "user" },
  },
  {
    tableName: "users",
    timestamps: true,
  }
);
// After User model
const Address = sequelize.define(
  "Address",
  {
    address1: { type: DataTypes.STRING, allowNull: false },
    address2: { type: DataTypes.STRING, allowNull: false },
    city: { type: DataTypes.STRING, allowNull: false },
    pincode: { type: DataTypes.STRING, allowNull: false },
    userId: { type: DataTypes.INTEGER, allowNull: false },
  },
  {
    tableName: "addresses",
    timestamps: true,
  }
);

//Associations
User.hasOne(Address, { foreignKey: "userId", onDelete: "CASCADE" });
Address.belongsTo(User, { foreignKey: "userId" });

// Auth middleware
function authMiddleware(req, res, next) {
  const authHeader = req.headers["authorization"];
  const token = authHeader && authHeader.split(" ")[1];
  if (!token) return res.status(401).json({ message: "Access denied" });

  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) return res.status(403).json({ message: "Invalid token" });
    req.user = user;
    next();
  });
}

// CREATE: Save new user
app.post("/api/save", async (req, res) => {
  const {
    name,
    email,
    age,
    password,
    phone,
    address1,
    address2,
    city,
    pincode,
  } = req.body;
  if (
    !name ||
    !email ||
    !age ||
    !password ||
    !address1 ||
    !address2 ||
    !city ||
    !pincode
  ) {
    return res.status(400).json({ message: "Required fields are missing" });
  }
  try {
    const hashedPassword = await bcrypt.hash(password, 10);
    const user = await User.create({
      name,
      email,
      age,
      password: hashedPassword,
      phone,
    });
    await Address.create({
      address1,
      address2,
      city,
      pincode,
      userId: user.id,
    });
    res.status(200).json({ message: "User saved successfully", id: user.id });
  } catch (error) {
    res.status(500).json({ message: "Error saving user" });
  }
});

// LOGIN: Verify password and return JWT
app.post("/api/login", async (req, res) => {
  const { username, password } = req.body;
  try {
    const user = await User.findOne({ where: { name: username } });
    if (!user)
      return res
        .status(401)
        .json({ success: false, message: "Invalid credentials" });
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch)
      return res
        .status(401)
        .json({ success: false, message: "Invalid credentials" });
    const token = jwt.sign(
      { id: user.id, name: user.name, role: user.role },
      JWT_SECRET,
      { expiresIn: "1h" }
    );
    res.json({
      success: true,
      message: "Login successful",
      token,
      user: { id: user.id, name: user.name, role: user.role },
    });
  } catch (error) {
    res.status(500).json({ message: "Server error" });
  }
});

// GET: Unified API for single user or all users (admin)
app.post("/api/users", authMiddleware, async (req, res) => {
  const { id } = req.body;
  if (!id) return res.status(400).json({ message: "User ID is required" });

  try {
    const requestingUser = await User.findByPk(id);
    if (!requestingUser)
      return res.status(404).json({ message: "User not found" });

    const users =
      requestingUser.role === "admin"
        ? await User.findAll({
            attributes: { exclude: ["password"] },
            include: [{ model: Address }],
          })
        : [
            await User.findByPk(id, {
              attributes: { exclude: ["password"] },
              include: [{ model: Address }],
            }),
          ];
    res.json(users);
  } catch (error) {
    res.status(500).json({ message: "Error fetching user(s)" });
  }
});

// DELETE: Delete user by ID
app.delete("/api/delete/:id", authMiddleware, async (req, res) => {
  const userId = req.params.id;
  try {
    const deleted = await User.destroy({ where: { id: userId } });
    if (!deleted) return res.status(404).json({ message: "User not found" });
    res.json({ message: "User deleted successfully" });
  } catch (error) {
    res.status(500).json({ message: "Failed to delete user" });
  }
});

// UPDATE: Update user by ID
app.put("/api/update/:id", authMiddleware, async (req, res) => {
  const userId = req.params.id;
  const {
    name,
    email,
    age,
    password,
    phone,
    address1,
    address2,
    city,
    pincode,
  } = req.body;
  try {
    let updateData = { name, email, age, phone };
    if (password) {
      updateData.password = await bcrypt.hash(password, 10);
    }
    const [updated] = await User.update(updateData, { where: { id: userId } });
    if (!updated) return res.status(404).json({ message: "User not found" });

    // Update or create address
    const address = await Address.findOne({ where: { userId } });
    if (address) {
      await address.update({ address1, address2, city, pincode });
    } else {
      await Address.create({ address1, address2, city, pincode, userId });
    }

    res.json({ message: "User updated successfully" });
  } catch (error) {
    res.status(500).json({ message: "Error updating user" });
  }
});

// Start server
app.listen(PORT, () => {
  console.log(`Server running at http://localhost:${PORT}`);
});
